/*
Events and Functions¶

In addition to being generated by conditional expressions, events can also be 
generated by certain functions in Modelica.
Event Generating Functions¶

The following is a list of functions that generate events wherever the return 
value has a discontinuity.
Function 	Description
div(x,y) 	Algebraic quotient with fractional part discarded.
mod(x,y) 	Modulus of x/y
rem(x,y) 	Remainder from the algebraic quotient
ceil(x) 	Smallest integer not less than x
floor(x) 	Largest integer not greater than x (returns a String)
integer(x) 	Largest integer not greater than x (returns an Integer)
initial() 	true during initialization, otherwise false
terminal() 	true at end of simulation, otherwise false
sample(t0,dt) 	Generates an event at t0 and every dt seconds later
edge(x) 	true only at the instant that x is true
change(x) 	true whenever x changes value
Non-Event Generating Functions¶

The following is a table of functions that do not generate events:
Function 	Description
abs(x) 	Absolute value of x
sign(x) 	Sign of x (-1, 0, or 1)
sqrt(x) 	Square root of x
min(x,y) 	Minimum value between x and y
max(x,y) 	Maximum value between x and y
Event Related Operators¶

The following operators provide special information about event 
generating signals:
Function 	Description
pre(x) 	During an event, holds the value of x before the event
previous(x) 	During clock tick, value of x during previous clock tick
hold(x) 	Anytime, value of x during previous clock tick
sample(expr,clock) 	During clock tick, value of expr
noEvent(expr) 	Suppresses events generated by expr
smooth(p,expr) 	Indicates expr can be safely differentiated p times.
Clock Related Operators¶

The following operators are used to create a manipulate clocks 
(event generators that trigger at regular intervals):
Function 	Description
Clock(i,r) 	A clock that fires every
seconds where i and r are both of type Integer
Clock(dt) 	A clock that fires every
seconds where dt is a String
subSample(u,s) 	A clock that samples s times slower than the clock used to sample u where s is an Integer
superSample(u,s) 	A clock that samples s times as fast as the clock used to sample u where s is an Integer

Note that the Clock constructor function is overloaded (i.e., can take different arguments). It is worth reiterating that the synchronous clock features in Modelica are relatively new. As such, they are not yet supported by all Modelica compilers. To learn more about these synchronous features and their applications see [Elmqvist] and/or the Modelica Specification, version 3.3 or later.

*/
record tokensTopics

import Model.tokens.tokens;
import Model.tokens.token;
import Model.tokens.tokenList;
import Model.tokens.topic;
import Model.tokens.topicName;
import Model.tokens.topicType;
import Model.tokens.topicValue;
import Model.tokens.topicValueName;
import Model.tokens.topicValueExpression;
import Model.tokens.topicValueExpressionName;


    String tokenList = "tokens";
    String token = "token";
    String tokenList = "tokenList";
    String topic = "topic";
    String topicName = "topicName";



    String token = "topic";
    String token = "topicName";
    String token = "topicType";
    String token = "topicValue";
    String token = "topicValueName";
    String token = "topicValueExpression";
    String token = "topicValueExpressionName";
    

package tokenDescriptions "Description"
    
    extends Model.tokens.tokenDescriptions;
    extends Model.tokens.tokenDescriptions;
    extends Model.tokens.token;
    extends Model.tokens.tokenList;
    extends Model.tokens.topic;
    extends Model.tokens.topicName;
    extends Model.tokens.topicType;
    extends Model.tokens.topicValue;
    extends Model.tokens.topicValueName;
    extends Model.tokens.topicValueExpression;
    extends Model.tokens.topicValueExpressionName;
end tokenDescriptions;


end tokensTopics;